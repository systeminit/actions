name: Trigger Management Function
description: Trigger a management function in a new changeset
author: jkeiser@systeminit.com

# Add your action's branding here. This will appear on the GitHub Marketplace.
branding:
  icon: heart
  color: red

# Define your inputs here.
inputs:
  changeSetName:
    description: The name of the changeset to create.

      By default this is required, unless changeSetId is passed.
    required: false
  componentId:
    description: The ID of the component to run the management function on.
    required: true
  domain:
    description: |
      A YAML or JSON object containing the domain properties to set for the management function component.

      For example:

      ```json
      domain:
        Region: us-east-1
        BaseCidrBlock: 10.0.0.0/16
        Tags: ["tag1", "tag2"]
      ```

      You may specify property keys as names, property IDs, or paths (e.g. { "name/first": "John", "name/last": "Doe" }).

      Each property's value will be replaced with the new value. Properties not specified are left alone.

      If this is not specified, no properties will be set.
  managementFunction:
    description: The name of the management function to run.

      This is optional if the component only has one management function.
  view:
    description: The name of view to run inside.

      This is optional if the component is only in one view.
  applyOnSuccess:
    description:
      Whether to apply the change set to main after triggering the management
      function. Set to "force" to force apply (if your user has permission to do
      so).
    type: choice
    options:
      - force
      - true
      - false
    default: true
  waitForApproval:
    description: Whether to wait for approval before applying the changeset (and
      fail if it is rejected).

      By default, we do not wait. If applyOnSuccess is anything but true (the
      default), this is ignored.

      If this is true, we will also wait for actions to complete unless you
      explicitly set waitForActions=false.
    type: boolean
    required: false
    default: false
  waitForActions:
    description: Whether to wait for actions to complete (and fail if the
      actions fail).

      By default, we wait for actions if applyOnSuccess=force or
      waitForApproval=true--otherwise this setting is ignored.
    type: boolean
    required: false
    default: true
  pollIntervalSeconds:
    description:
      Length of time (in seconds) between checks when polling for changeset
      status
    type: number
    default: 10

  apiToken:
    description: |
      The API token. You can create one by going to
      https://auth.systeminit.com/workspaces/, clicking on the Settings (gear)
      icon on your workspace, and selecting "API Tokens." Then enter a name and
      expiration, and click "Generate API Token."

      You should use GitHub's secrets mechanism to store and pass this.
    required: true

  # Highly optional parameters, generally for development purposes:
  managementPrototypeId:
    description: The ID of the management function prototype to run.
  viewId:
    description: The ID of the view containing the component.
  workspaceId:
    description: The ID of the workspace containing the component.

      If not specified, this will be set to the workspace ID you grabbed the
      token for.
    required: false
  changeSetId:
    description: The ID of the changeset containing the component, or "create"
      to create a new one based on HEAD.

      Defaults to "create."
    required: false
    default: create
  apiUrl:
    description:
      The URL to the SI instance's API server. This is optional, and generally
      points to SI's hosted API service by default.
  webUrl:
    description:
      The URL to the SI instance's web server. This defaults to the same as
      apiUrl. Generally only used for local development where the servers may be
      running on different ports.

  # Not yet supported:
  # updateComponents:
  #   description: |
  #     A YAML or JSON object containing a list of other components (besides the management component) to update.

  #     The keys of the object are the components to update, and the values are the domain properties to set on
  #     each object, in the same format as the `domain` parameter.

  #     For example:

  #     updateComponents:
  #       01JDQG3REZ7H2N5SWFKR3640RC:
  #         Region: us-west-2
  #       01JHVFRAJCWJEF7DRSKNPQX0ZY:
  #         Tags: ["tag1", "tag2"]
  # abandonOnFailure:
  #   description:
  #     Whether to abandon the created changeset if triggering the management
  #     function fails.
  #   required: false
  #   default: false

# Define your outputs here.
outputs:
  managementFunctionLogs:
    description: The logs from the management function.
  workspaceId:
    description: The ID of the workspace containing the component.
  changeSetId:
    description: The ID of the changeset created.
  changeSetWebUrl:
    description: The web URL to the changeset.
  componentWebUrl:
    description: The web URL to the component.

runs:
  using: node20
  main: ../dist/index.js
